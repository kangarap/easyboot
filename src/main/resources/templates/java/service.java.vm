package ${packageName}.service;

import java.util.Date;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import ${packageName}.entity.${ClassName};

/**
 * ${functionName}Service接口
 * 
 * @author ${author}
 * @version 1.0
 * date ${datetime}
 */
@Service
@CacheConfig(cacheNames = {"${moduleName}:${ClassName}"})
@Transactional(rollbackFor = Exception.class)
public class ${ClassName}Service extends BaseService<${ClassName}Params> {
    @Resource
    private ${ClassName}Dao dao;

    /**
     * 分页查询${functionName}数据
     * @param params 查询参数
     * @param pageable 分页
     * @return Page<${ClassName}>
     */
    public Page<${ClassName}> findAll(${ClassName}Params params, Pageable pageable) {
	    // 构造分页排序条件
	    Pageable page = pageable;
	    if (pageable.getSort().equals(Sort.unsorted())) {
		    Sort sort = Sort.by(Sort.Order.desc(Constants.STATUS));
		    page = PageRequest.of(pageable.getPageNumber(), pageable.getPageSize(), sort);
	    }
	    // 构造查询条件
	    Specification<${ClassName}> spec = new SimpleSpecificationBuilder<${ClassName}>()
			    .and(Constants.STATUS, Operator.EQUAL, params.getStatus())
			    .build();
	    return dao.findAll(spec, page);
    }

    /**
     * 根据id查询${functionName}
     * 
     * @param id ${functionName}id
     * @return ${ClassName}对象
     */
    public ${ClassName} findById(Long id) {
	    if (null == id) {
		    return new ${ClassName}();
	    }
	    return dao.findById(id).orElse(new ${ClassName}());
    }

    /**
     * 新增${functionName}
     * 
     * @param entity ${functionName}
     * @return 结果
     */
    public ${ClassName} save(${ClassName} entity) {
	    entity.setCreateTime(new Date());
	    entity.setCreateBy(SecurityUtils.getUsername());
	    return dao.saveAndFlush(entity);
    }

    /**
     * 修改${functionName}
     * 
     * @param entity ${functionName}
     * @return 结果
     */
    public ${ClassName} update(${ClassName} entity) {
	    entity.setUpdateTime(new Date());
	    entity.setUpdateBy(SecurityUtils.getUsername());
	    return dao.saveAndFlush(entity);
    }

    /**
     * 批量删除${functionName}
     * 
     * @param ${pkColumn.javaField}s 需要删除的${functionName}ID
     */
    public void deleteByIds(Long[] ids) {
	    for (Long id: ids) {
		    // 根据用户id删除数据
		    dao.deleteById(id);
	    }
    }
}
