/*
 * Copyright © 2020-present zmzhou-star. All Rights Reserved.
 */

package ${packageName}.controller;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import ${packageName}.entity.${ClassName};
import ${packageName}.service.${ClassName}Service;
import ${packageName}.vo.${ClassName}Params;
import ${packageName}.vo.${ClassName}Vo;
import com.github.zmzhou.easyboot.framework.page.ApiResult;
import com.github.zmzhou.easyboot.framework.page.TableDataInfo;
import com.github.zmzhou.easyboot.framework.vo.Params;
import com.github.zmzhou.easyboot.framework.web.BaseController;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

/**
 * ${functionName}Controller
 *
 * @author ${author}
 * @version 1.0
 * @since ${datetime}
 */
@Api(tags = {"${functionName}"})
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController {
	@Resource
	private ${ClassName}Service ${className}Service;

	/**
	 * 查询${functionName}列表
	 * @param params 查询参数
	 * @return ApiResult<TableDataInfo>
	 * @author ${author}
	 * date ${datetime}
	 */
	@PreAuthorize("@ebpe.hasPermission('${moduleName}:${businessName}:list')")
	@ApiOperation(value = "查询${functionName}列表")
	@PostMapping(path = "list")
	public ApiResult<TableDataInfo> list(@RequestBody(required = false) ${ClassName}Params params) {
		Pageable pageable = getPageable(params);
		Page<${ClassName}> list = ${className}Service.findAll(params, pageable);
		return ok(list);
	}

	/**
	 * 根据id获取${functionName}详细信息
	 * @param id ${functionName}id
	 * @return ApiResult<${ClassName}>
	 * @author ${author}
	 * date ${datetime}
	 */
	@PreAuthorize("@ebpe.hasPermission('${moduleName}:${businessName}:query')")
	@ApiOperation(value = "根据id获取${functionName}详细信息")
	@GetMapping(value = "/{id}")
	public ApiResult<${ClassName}> findById(@PathVariable(value = "id" , required = false) Long id) {
		return ok(${className}Service.findById(id));
	}

	/**
	 * 新增${functionName}
	 * @param vo ${functionName}信息
	 * @return ApiResult<${ClassName}>
	 * @author ${author}
	 * date ${datetime}
	 */
	@PreAuthorize("@ebpe.hasPermission('${moduleName}:${businessName}:add')")
	@ApiOperation(value = "新增${functionName}")
	@PostMapping
	public ApiResult<${ClassName}> save(@Validated @RequestBody ${ClassName}Vo vo) {
		return ok(${className}Service.save(vo.toEntity()));
	}

	/**
	 * 修改${functionName}
	 * @param vo ${functionName}信息
	 * @return ApiResult<${ClassName}>
	 * @author ${author}
	 * date ${datetime}
	 */
	@PreAuthorize("@ebpe.hasPermission('${moduleName}:${businessName}:edit')")
	@ApiOperation(value = "修改${functionName}")
	@PutMapping
	public ApiResult<${ClassName}> update(@Validated @RequestBody ${ClassName}Vo vo) {
		return ok(${className}Service.update(vo.toEntity()));
	}

	/**
	 * 删除${functionName}
	 * @param ids ${functionName}id集合
	 * @return 删除结果
	 * @author ${author}
	 * date ${datetime}
	 */
	@PreAuthorize("@ebpe.hasPermission('${moduleName}:${businessName}:remove')")
	@ApiOperation(value = "删除${functionName}")
	@DeleteMapping("/{ids}")
	public ApiResult<Integer> remove(@PathVariable("ids")
			 @ApiParam(name = "ids" , value = "id数组" , required = true) Long[] ids) {
		${className}Service.deleteByIds(ids);
		return new ApiResult<>();
	}

	/**
	 * 导出excel
	 * @param params 查询参数
	 * @return ApiResult<String> excel文件名
	 * @author ${author}
	 * date ${datetime}
	 */
	@PreAuthorize("@ebpe.hasPermission('${moduleName}:${businessName}:export')")
	@PostMapping("/export")
	@ApiOperation(value = "导出${functionName}excel")
	public ApiResult<String> export(@RequestBody ${ClassName}Params params) throws InterruptedException {
		return ok(${className}Service.export(params));
	}
}
